version: '3.8'
networks:
  web:
    external: true
  internal:
    external: false
    driver: bridge
services:
  gis_server: 
    image: pramsey/pg_featureserv:20230121
    container_name: gis_server
    expose:
      - "9000"
    environment:
    # db string variable from .env
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy

    volumes:
      - ./config/pg_featureserv.toml:/etc/pg_featureserv.toml
    networks:
      - internal
  db: 
    image: kartoza/postgis:14-3.1
    env_file:     
       - ./.env    
    environment:      
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASSWORD}
      - ALLOW_IP_RANGE=0.0.0.0/0
    volumes:
      - ./data/db:/var/lib/postgresql/data
      - ./bristol_green_space.sql:/docker-entrypoint-initdb.d/bristol_green_space.sql
    ports:
      - 5435:5432
    healthcheck:
      # healthcheck to prevent web container failing at startup
      test: "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - internal
  caddy:
    image: caddy:latest
    restart: unless-stopped
    container_name: caddy
    depends_on:
     - gis_server
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/site:/srv
      - ./caddy/caddy_data:/data
      - ./caddy/caddy_config:/config
    networks:
      - internal
      - web

volumes:
  caddy_data:
  caddy_config:
  postgres_data:
